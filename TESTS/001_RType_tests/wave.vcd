$date
	Fri Mar  3 17:15:12 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # clock [31:0] $end
$var integer 32 $ i [31:0] $end
$var integer 32 % reg_file_contents [31:0] $end
$scope module SoC_0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 & instr_valid_from_imem $end
$var wire 32 ' instr_from_imem [31:0] $end
$var wire 32 ( instr_addr_from_proc [31:0] $end
$scope module imem_0 $end
$var wire 32 ) ip_instr_addr_from_proc [31:0] $end
$var reg 32 * op_instr_from_imem [31:0] $end
$var reg 1 & op_instr_valid $end
$scope begin imem_block $end
$upscope $end
$upscope $end
$scope module processor_v1_0 $end
$var wire 1 ! clk $end
$var wire 32 + ip_instr_from_imem [31:0] $end
$var wire 1 & ip_instr_valid $end
$var wire 1 " rst $end
$var wire 32 , read_data2 [31:0] $end
$var wire 32 - read_data1 [31:0] $end
$var wire 1 . op_data_wr $end
$var wire 32 / op_data_from_proc [31:0] $end
$var wire 32 0 ip_instr_addr_from_pc [31:0] $end
$var wire 7 1 funct [6:0] $end
$var wire 3 2 alu_op_code [2:0] $end
$var reg 32 3 op_instr_addr_from_proc [31:0] $end
$scope module alu_0 $end
$var wire 32 4 read_data2 [31:0] $end
$var wire 32 5 read_data1 [31:0] $end
$var wire 7 6 funct [6:0] $end
$var wire 3 7 alu_op_code [2:0] $end
$var reg 32 8 result [31:0] $end
$scope begin ALU_Block $end
$upscope $end
$upscope $end
$scope module dec_0 $end
$var wire 32 9 ip_instr_from_imem [31:0] $end
$var wire 1 & ip_instr_valid $end
$var reg 3 : alu_op_code [2:0] $end
$var reg 7 ; funct [6:0] $end
$var reg 1 . reg_write $end
$scope begin decoder_block $end
$upscope $end
$upscope $end
$scope module pc_0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 < next_pc [31:0] $end
$var reg 32 = op_instr_addr [31:0] $end
$var reg 32 > pc [31:0] $end
$scope begin PC_Block $end
$upscope $end
$upscope $end
$scope module regfile_0 $end
$var wire 1 ! clk $end
$var wire 5 ? reg_dest [4:0] $end
$var wire 5 @ reg_src1 [4:0] $end
$var wire 5 A reg_src2 [4:0] $end
$var wire 1 " rst $end
$var wire 32 B write_back [31:0] $end
$var wire 1 . write_en $end
$var reg 32 C read_data1 [31:0] $end
$var reg 32 D read_data2 [31:0] $end
$scope begin register_file_block $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
1.
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
1&
bx %
bx $
b0 #
1"
0!
$end
#5000
b110110 /
b110110 8
b110110 B
b101100 ,
b101100 4
b101100 D
b1010 -
b1010 5
b1010 C
b100 @
b1000 A
b11 ?
b0 1
b0 6
b0 ;
b0 2
b0 7
b0 :
b100000100000000110110011 '
b100000100000000110110011 *
b100000100000000110110011 +
b100000100000000110110011 9
b0 (
b0 )
b0 3
b100 <
b0 0
b0 =
b0 >
1!
#10000
0!
#15000
1!
#20000
0!
#25000
1!
#30000
0!
#35000
1!
#40000
0!
#45000
1!
#50000
0"
0!
#55000
b11 /
b11 8
b11 B
b10 ,
b10 4
b10 D
b1 -
b1 5
b1 C
b1 @
b10 A
b10 ?
b1000001000000100110011 '
b1000001000000100110011 *
b1000001000000100110011 +
b1000001000000100110011 9
b100 (
b100 )
b100 3
b1000 <
b100 0
b100 =
b100 >
b1 #
1!
#60000
0!
#65000
b11 -
b11 5
b11 C
b10 @
b11 A
b1000 ?
b1100010000010000110011 '
b1100010000010000110011 *
b1100010000010000110011 +
b1100010000010000110011 9
b1000 (
b1000 )
b1000 3
b111001 /
b111001 8
b111001 B
b1100 <
b1000 0
b1000 =
b110110 ,
b110110 4
b110110 D
b1000 >
b10 #
1!
#70000
0!
#75000
b110 ,
b110 4
b110 D
b1111000000000001 -
b1111000000000001 5
b1111000000000001 C
b1111000000000001000000 /
b1111000000000001000000 8
b1111000000000001000000 B
b1011 @
b1100 A
b1010 ?
b1 2
b1 7
b1 :
b110001011001010100110011 '
b110001011001010100110011 *
b110001011001010100110011 +
b110001011001010100110011 9
b1100 (
b1100 )
b1100 3
b10000 <
b1100 0
b1100 =
b1100 >
b11 #
1!
#80000
0!
#85000
b1000000000000001100000 /
b1000000000000001100000 8
b1000000000000001100000 B
b101 ,
b101 4
b101 D
b10000000000000011 -
b10000000000000011 5
b10000000000000011 C
b1101 @
b1110 A
b1111 ?
b111001101001011110110011 '
b111001101001011110110011 *
b111001101001011110110011 +
b111001101001011110110011 9
b10000 (
b10000 )
b10000 3
b10100 <
b10000 0
b10000 =
b10000 >
b100 #
1!
#90000
0!
#95000
b10000000000011100 ,
b10000000000011100 4
b10000000000011100 D
b10000000000001100 -
b10000000000001100 5
b10000000000001100 C
b1 /
b1 8
b1 B
b10000 @
b10001 A
b10010 ?
b10 2
b10 7
b10 :
b1000110000010100100110011 '
b1000110000010100100110011 *
b1000110000010100100110011 +
b1000110000010100100110011 9
b10100 (
b10100 )
b10100 3
b11000 <
b10100 0
b10100 =
b10100 >
b101 #
1!
#100000
0!
#105000
b10001000100010001000100010001 ,
b10001000100010001000100010001 4
b10001000100010001000100010001 D
b0 -
b0 5
b0 C
b10001000100010001000100010001 /
b10001000100010001000100010001 8
b10001000100010001000100010001 B
b10100 @
b10011 A
b10101 ?
b100 2
b100 7
b100 :
b1001110100100101010110011 '
b1001110100100101010110011 *
b1001110100100101010110011 +
b1001110100100101010110011 9
b11000 (
b11000 )
b11000 3
b11100 <
b11000 0
b11000 =
b11000 >
b110 #
1!
#110000
0!
#115000
b10001000100010001000100010011 /
b10001000100010001000100010011 8
b10001000100010001000100010011 B
b10 ,
b10 4
b10 D
b10001000100010001000100010001 -
b10001000100010001000100010001 5
b10001000100010001000100010001 C
b10101 @
b10110 A
b10111 ?
b110 2
b110 7
b110 :
b1011010101110101110110011 '
b1011010101110101110110011 *
b1011010101110101110110011 +
b1011010101110101110110011 9
b11100 (
b11100 )
b11100 3
b100000 <
b11100 0
b11100 =
b11100 >
b111 #
1!
#120000
0!
#125000
b1010 ,
b1010 4
b1010 D
b10001000100010001000100010011 -
b10001000100010001000100010011 5
b10001000100010001000100010011 C
b10 /
b10 8
b10 B
b10111 @
b11000 A
b11001 ?
b111 2
b111 7
b111 :
b1100010111111110010110011 '
b1100010111111110010110011 *
b1100010111111110010110011 +
b1100010111111110010110011 9
b100000 (
b100000 )
b100000 3
b100100 <
b100000 0
b100000 =
b100000 >
b1000 #
1!
#130000
0!
#135000
b101100 ,
b101100 4
b101100 D
b11100 -
b11100 5
b11100 C
b11111111111111111111111111110000 /
b11111111111111111111111111110000 8
b11111111111111111111111111110000 B
b11011 @
b11100 A
b11101 ?
b100000 1
b100000 6
b100000 ;
b0 2
b0 7
b0 :
b1000001110011011000111010110011 '
b1000001110011011000111010110011 *
b1000001110011011000111010110011 +
b1000001110011011000111010110011 9
b100100 (
b100100 )
b100100 3
b101000 <
b100100 0
b100100 =
b100100 >
b1001 #
1!
#140000
0!
#145000
b111100 /
b111100 8
b111100 B
b11111111111111111111111111110000 ,
b11111111111111111111111111110000 4
b11111111111111111111111111110000 D
b101100 -
b101100 5
b101100 C
b11100 @
b11101 A
b11110 ?
b1000001110111100000111100110011 '
b1000001110111100000111100110011 *
b1000001110111100000111100110011 +
b1000001110111100000111100110011 9
b101000 (
b101000 )
b101000 3
b101100 <
b101000 0
b101000 =
b101000 >
b1010 #
1!
#150000
0!
#155000
b0 ,
b0 4
b0 D
b0 -
b0 5
b0 C
b0 /
b0 8
b0 B
b0 @
b0 A
b0 ?
b0 1
b0 6
b0 ;
b100000 $
b10 %
b0 '
b0 *
b0 +
b0 9
b101100 (
b101100 )
b101100 3
b110000 <
b101100 0
b101100 =
b101100 >
b1011 #
1!
