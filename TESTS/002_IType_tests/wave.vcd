$date
	Mon Mar 13 21:42:45 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # clock [31:0] $end
$var integer 32 $ i [31:0] $end
$var integer 32 % reg_file_contents [31:0] $end
$scope module SoC_0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 & instr_valid_from_imem $end
$var wire 32 ' instr_from_imem [31:0] $end
$var wire 32 ( instr_addr_from_proc [31:0] $end
$scope module imem_0 $end
$var wire 32 ) ip_instr_addr_from_proc [31:0] $end
$var reg 32 * op_instr_from_imem [31:0] $end
$var reg 1 & op_instr_valid $end
$scope begin imem_block $end
$upscope $end
$upscope $end
$scope module processor_v1_0 $end
$var wire 1 ! clk $end
$var wire 32 + ip_instr_from_imem [31:0] $end
$var wire 1 & ip_instr_valid $end
$var wire 1 " rst $end
$var wire 32 , read_data_from_mux [31:0] $end
$var wire 32 - read_data2 [31:0] $end
$var wire 32 . read_data1 [31:0] $end
$var wire 1 / op_data_wr $end
$var wire 32 0 op_data_from_proc [31:0] $end
$var wire 32 1 ip_instr_addr_from_pc [31:0] $end
$var wire 7 2 funct7 [6:0] $end
$var wire 3 3 funct3 [2:0] $end
$var wire 1 4 alu_src_from_imem $end
$var reg 32 5 imem_sign_ext [31:0] $end
$var reg 32 6 op_instr_addr_from_proc [31:0] $end
$scope module alu_0 $end
$var wire 32 7 read_data2 [31:0] $end
$var wire 32 8 read_data1 [31:0] $end
$var wire 7 9 funct7 [6:0] $end
$var wire 3 : funct3 [2:0] $end
$var reg 32 ; result [31:0] $end
$scope begin ALU_Block $end
$upscope $end
$upscope $end
$scope module dec_0 $end
$var wire 32 < ip_instr_from_imem [31:0] $end
$var wire 1 & ip_instr_valid $end
$var reg 1 4 alu_src_from_imem $end
$var reg 3 = funct3 [2:0] $end
$var reg 7 > funct7 [6:0] $end
$var reg 1 / reg_write $end
$scope begin decoder_block $end
$upscope $end
$upscope $end
$scope module mux_32_0 $end
$var wire 32 ? inp1 [31:0] $end
$var wire 1 4 sel $end
$var wire 32 @ inp0 [31:0] $end
$var reg 32 A out [31:0] $end
$upscope $end
$scope module pc_0 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 B next_pc [31:0] $end
$var reg 32 C op_instr_addr [31:0] $end
$var reg 32 D pc [31:0] $end
$scope begin PC_Block $end
$upscope $end
$upscope $end
$scope module regfile_0 $end
$var wire 1 ! clk $end
$var wire 5 E reg_dest [4:0] $end
$var wire 5 F reg_src1 [4:0] $end
$var wire 5 G reg_src2 [4:0] $end
$var wire 1 " rst $end
$var wire 32 H write_back [31:0] $end
$var wire 1 / write_en $end
$var reg 32 I read_data1 [31:0] $end
$var reg 32 J read_data2 [31:0] $end
$scope begin register_file_block $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
x4
bx 3
bx 2
bx 1
bx 0
x/
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
1&
bx %
bx $
b0 #
1"
0!
$end
#5000
b110110 0
b110110 ;
b110110 H
b101100 ,
b101100 7
b101100 A
b101100 -
b101100 @
b101100 J
b1010 .
b1010 8
b1010 I
b100 F
b1000 G
b11 E
b0 2
b0 9
b0 >
b0 3
b0 :
b0 =
04
1/
b100000100000000110110011 '
b100000100000000110110011 *
b100000100000000110110011 +
b100000100000000110110011 <
b0 5
b0 ?
b0 (
b0 )
b0 6
b100 B
b0 1
b0 C
b0 D
1!
#10000
0!
#15000
1!
#20000
0!
#25000
1!
#30000
0!
#35000
1!
#40000
0!
#45000
1!
#50000
0"
0!
#55000
b10 ,
b10 7
b10 A
b11 0
b11 ;
b11 H
b10 -
b10 @
b10 J
b1 .
b1 8
b1 I
b1 F
b10 G
b10 E
b1000001000000100110011 '
b1000001000000100110011 *
b1000001000000100110011 +
b1000001000000100110011 <
b100 (
b100 )
b100 6
b1000 B
b100 1
b100 C
b100 D
b1 #
1!
#60000
0!
#65000
b11 .
b11 8
b11 I
b10 F
b11 G
b1000 E
b1100010000010000110011 '
b1100010000010000110011 *
b1100010000010000110011 +
b1100010000010000110011 <
b111001 0
b111001 ;
b111001 H
b1000 (
b1000 )
b1000 6
b110110 ,
b110110 7
b110110 A
b1100 B
b1000 1
b1000 C
b110110 -
b110110 @
b110110 J
b1000 D
b10 #
1!
#70000
0!
#75000
b110 ,
b110 7
b110 A
b110 -
b110 @
b110 J
b1111000000000001 .
b1111000000000001 8
b1111000000000001 I
b1111000000000001000000 0
b1111000000000001000000 ;
b1111000000000001000000 H
b1011 F
b1100 G
b1010 E
b1 3
b1 :
b1 =
b110001011001010100110011 '
b110001011001010100110011 *
b110001011001010100110011 +
b110001011001010100110011 <
b1100 (
b1100 )
b1100 6
b10000 B
b1100 1
b1100 C
b1100 D
b11 #
1!
#80000
0!
#85000
b101 ,
b101 7
b101 A
b1000000000000001100000 0
b1000000000000001100000 ;
b1000000000000001100000 H
b101 -
b101 @
b101 J
b10000000000000011 .
b10000000000000011 8
b10000000000000011 I
b1101 F
b1110 G
b1111 E
b111001101001011110110011 '
b111001101001011110110011 *
b111001101001011110110011 +
b111001101001011110110011 <
b10000 (
b10000 )
b10000 6
b10100 B
b10000 1
b10000 C
b10000 D
b100 #
1!
#90000
0!
#95000
b10000000000011100 ,
b10000000000011100 7
b10000000000011100 A
b10000000000011100 -
b10000000000011100 @
b10000000000011100 J
b10000000000001100 .
b10000000000001100 8
b10000000000001100 I
b1 0
b1 ;
b1 H
b10000 F
b10001 G
b10010 E
b10 3
b10 :
b10 =
b1000110000010100100110011 '
b1000110000010100100110011 *
b1000110000010100100110011 +
b1000110000010100100110011 <
b10100 (
b10100 )
b10100 6
b11000 B
b10100 1
b10100 C
b10100 D
b101 #
1!
#100000
0!
#105000
b10001000100010001000100010001 ,
b10001000100010001000100010001 7
b10001000100010001000100010001 A
b10001000100010001000100010001 -
b10001000100010001000100010001 @
b10001000100010001000100010001 J
b0 .
b0 8
b0 I
b10001000100010001000100010001 0
b10001000100010001000100010001 ;
b10001000100010001000100010001 H
b10100 F
b10011 G
b10101 E
b100 3
b100 :
b100 =
b1001110100100101010110011 '
b1001110100100101010110011 *
b1001110100100101010110011 +
b1001110100100101010110011 <
b11000 (
b11000 )
b11000 6
b11100 B
b11000 1
b11000 C
b11000 D
b110 #
1!
#110000
0!
#115000
b10001000100010001000100010011 0
b10001000100010001000100010011 ;
b10001000100010001000100010011 H
b10 ,
b10 7
b10 A
b10 -
b10 @
b10 J
b10001000100010001000100010001 .
b10001000100010001000100010001 8
b10001000100010001000100010001 I
b10101 F
b10110 G
b10111 E
b110 3
b110 :
b110 =
b1011010101110101110110011 '
b1011010101110101110110011 *
b1011010101110101110110011 +
b1011010101110101110110011 <
b11100 (
b11100 )
b11100 6
b100000 B
b11100 1
b11100 C
b11100 D
b111 #
1!
#120000
0!
#125000
b1010 ,
b1010 7
b1010 A
b1010 -
b1010 @
b1010 J
b10001000100010001000100010011 .
b10001000100010001000100010011 8
b10001000100010001000100010011 I
b10 0
b10 ;
b10 H
b10111 F
b11000 G
b11001 E
b111 3
b111 :
b111 =
b1100010111111110010110011 '
b1100010111111110010110011 *
b1100010111111110010110011 +
b1100010111111110010110011 <
b100000 (
b100000 )
b100000 6
b100100 B
b100000 1
b100000 C
b100000 D
b1000 #
1!
#130000
0!
#135000
b101100 ,
b101100 7
b101100 A
b101100 -
b101100 @
b101100 J
b11100 .
b11100 8
b11100 I
b11111111111111111111111111110000 0
b11111111111111111111111111110000 ;
b11111111111111111111111111110000 H
b11011 F
b11100 G
b11101 E
b100000 2
b100000 9
b100000 >
b0 3
b0 :
b0 =
b1000001110011011000111010110011 '
b1000001110011011000111010110011 *
b1000001110011011000111010110011 +
b1000001110011011000111010110011 <
b100100 (
b100100 )
b100100 6
b101000 B
b100100 1
b100100 C
b100100 D
b1001 #
1!
#140000
0!
#145000
b11111111111111111111111111110000 ,
b11111111111111111111111111110000 7
b11111111111111111111111111110000 A
b111100 0
b111100 ;
b111100 H
b11111111111111111111111111110000 -
b11111111111111111111111111110000 @
b11111111111111111111111111110000 J
b101100 .
b101100 8
b101100 I
b11100 F
b11101 G
b11110 E
b1000001110111100000111100110011 '
b1000001110111100000111100110011 *
b1000001110111100000111100110011 +
b1000001110111100000111100110011 <
b101000 (
b101000 )
b101000 6
b101100 B
b101000 1
b101000 C
b101000 D
b1010 #
1!
#150000
0!
#155000
b1011 -
b1011 @
b1011 J
b1010 .
b1010 8
b1010 I
b1111 0
b1111 ;
b1111 H
b101 ,
b101 7
b101 A
b101 5
b101 ?
b100 F
b101 G
b110 E
b0 2
b0 9
b0 >
14
b10100100000001100010011 '
b10100100000001100010011 *
b10100100000001100010011 +
b10100100000001100010011 <
b101100 (
b101100 )
b101100 6
b110000 B
b101100 1
b101100 C
b101100 D
b1011 #
1!
#160000
0!
#165000
b11001 0
b11001 ;
b11001 H
b1010 ,
b1010 7
b1010 A
b1111000000000001000000 -
b1111000000000001000000 @
b1111000000000001000000 J
b1111 .
b1111 8
b1111 I
b1010 5
b1010 ?
b110 F
b1010 G
b111 E
b101000110000001110010011 '
b101000110000001110010011 *
b101000110000001110010011 +
b101000110000001110010011 <
b110000 (
b110000 )
b110000 6
b110100 B
b110000 1
b110000 C
b110000 D
b1100 #
1!
#170000
0!
#175000
b110010 ,
b110010 7
b110010 A
b1 -
b1 @
b1 J
b11001 .
b11001 8
b11001 I
b1 0
b1 ;
b1 H
b110010 5
b110010 ?
b111 F
b10010 G
b1000 E
b1 2
b1 9
b1 >
b10 3
b10 :
b10 =
b11001000111010010000010011 '
b11001000111010010000010011 *
b11001000111010010000010011 +
b11001000111010010000010011 <
b110100 (
b110100 )
b110100 6
b111000 B
b110100 1
b110100 C
b110100 D
b1101 #
1!
#180000
0!
#185000
b0 0
b0 ;
b0 H
b10100 ,
b10100 7
b10100 A
b0 -
b0 @
b0 J
b10100 5
b10100 ?
b10100 G
b0 2
b0 9
b0 >
b1010000111010010000010011 '
b1010000111010010000010011 *
b1010000111010010000010011 +
b1010000111010010000010011 <
b111000 (
b111000 )
b111000 6
b111100 B
b111000 1
b111000 C
b111000 D
b1110 #
1!
#190000
0!
#195000
b0 ,
b0 7
b0 A
b11001 0
b11001 ;
b11001 H
b0 5
b0 ?
b0 G
b100 3
b100 :
b100 =
b111100010000010011 '
b111100010000010011 *
b111100010000010011 +
b111100010000010011 <
b111100 (
b111100 )
b111100 6
b1000000 B
b111100 1
b111100 C
b111100 D
b1111 #
1!
#200000
0!
#205000
b1001 E
b110 3
b110 :
b110 =
b111110010010010011 '
b111110010010010011 *
b111110010010010011 +
b111110010010010011 <
b1000000 (
b1000000 )
b1000000 6
b1000100 B
b1000000 1
b1000000 C
b1000000 D
b10000 #
1!
#210000
0!
#215000
b0 0
b0 ;
b0 H
b1010 E
b111 3
b111 :
b111 =
b111111010100010011 '
b111111010100010011 *
b111111010100010011 +
b111111010100010011 <
b1000100 (
b1000100 )
b1000100 6
b1001000 B
b1000100 1
b1000100 C
b1000100 D
b10001 #
1!
#220000
0!
#225000
b0 .
b0 8
b0 I
b0 F
b0 E
b100000 $
b10 %
b0 '
b0 *
b0 +
b0 <
b1001000 (
b1001000 )
b1001000 6
b1001100 B
b1001000 1
b1001000 C
b1001000 D
b10010 #
1!
